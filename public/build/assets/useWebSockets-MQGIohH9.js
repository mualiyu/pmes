import{H as c,J as l,X as w,K as S}from"./app-CQeDVQuS.js";import{p as r}from"./with-selector-Dx34AVcc.js";import{c as A}from"./index-DSj5ND_Q.js";import{u as C}from"./useTaskGroupsStore-CDXuzMdx.js";import{u as v}from"./useTasksStore-DWoe4t5E.js";const b=A(s=>({notifications:[],setNotifications:a=>s(r(t=>{t.notifications=[...a]})),addNotification:a=>s(r(t=>{const i=t.notifications.length>=6?t.notifications.slice(0,t.notifications.length-1):t.notifications;t.notifications=[a,...i]})),markAsRead:async a=>{try{return await c.put(route("notifications.read",a.id)),s(r(t=>{const i=t.notifications.findIndex(n=>n.id===a.id);t.notifications[i].read_at=l().toISOString()}))}catch(t){console.warn("Failed to set notification as read",t)}},markAllAsRead:async()=>{try{return await c.put(route("notifications.read.all")),s(r(a=>{a.notifications.forEach(t=>{t.read_at=l().toISOString()})}))}catch(a){console.warn("Failed to set notifications as read",a)}}}));function D(){const{auth:{user:s}}=w().props,{addNotification:a}=b(),{addTaskLocally:t,updateTaskLocally:i,removeTaskLocally:n,restoreTaskLocally:k,addCommentLocally:d,addAttachmentsLocally:p,removeAttachmentLocally:u,addTimeLogLocally:T,removeTimeLogLocally:m,reorderTaskLocally:f,moveTaskLocally:G}=v(),{addTaskGroupLocally:y,updateTaskGroupLocally:L,removeTaskGroupLocally:h,restoreTaskGroupLocally:I,reorderTaskGroupLocally:g}=C();return{initUserWebSocket:()=>{window.Echo.private(`App.Models.User.${s.id}`).notification(e=>{a(e),S({title:e.title,message:e.subtitle,autoClose:8e3})})},initProjectWebSocket:e=>(window.Echo.private(`App.Models.Project.${e.id}`).listen("Task\\TaskCreated",o=>t(o.task)).listen("Task\\TaskUpdated",o=>i(o.taskId,o.property,o.value)).listen("Task\\TaskDeleted",o=>n(o.taskId)).listen("Task\\TaskRestored",o=>k(o.groupId,o.task)).listen("Task\\CommentCreated",o=>d(o.comment)).listen("Task\\AttachmentsUploaded",o=>p(o.attachments)).listen("Task\\AttachmentDeleted",o=>u(o.taskId,o.attachmentId)).listen("Task\\TimeLogCreated",o=>T(o.timeLog)).listen("Task\\TimeLogDeleted",o=>m(o.taskId,o.timeLogId)).listen("Task\\TaskOrderChanged",o=>f(o.groupId,o.fromIndex,o.toIndex)).listen("Task\\TaskGroupChanged",o=>G(o.fromGroupId,o.toGroupId,o.fromIndex,o.toIndex)).listen("TaskGroup\\TaskGroupCreated",o=>y(o.taskGroup)).listen("TaskGroup\\TaskGroupUpdated",o=>L(o.taskGroup)).listen("TaskGroup\\TaskGroupDeleted",o=>h(o.taskGroupId)).listen("TaskGroup\\TaskGroupRestored",o=>I(o.taskGroup)).listen("TaskGroup\\TaskGroupOrderChanged",o=>g(o.taskGroupIds)),()=>window.Echo.leave(`App.Models.Project.${e.id}`)),initTaskWebSocket:e=>(window.Echo.private(`App.Models.Task.${e.id}`).listen("Task\\CommentCreated",o=>d(o.comment)),()=>window.Echo.leave(`App.Models.Task.${e.id}`))}}export{D as a,b as u};
